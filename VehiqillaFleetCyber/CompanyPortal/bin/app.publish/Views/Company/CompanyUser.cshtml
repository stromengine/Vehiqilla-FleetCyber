
@{
    ViewBag.Title = "Company Users";
}
@using CompanyPortal.Models

<div class="container-xxl flex-grow-1 container-p-y">
    <div class="row">
        <div class="col-xl-12">
            <div class="nav-align-top nav-tabs-shadow mb-4">
                <ul class="nav nav-tabs " role="tablist">
                    <li class="nav-item">
                        <button type="button" class="nav-link active" role="tab" data-bs-toggle="tab" data-bs-target="#data" aria-controls="navs-justified-home" aria-selected="true"><i class="tf-icons ti ti-database ti-xs me-1"></i> Data </button>
                    </li>
                    <li class="nav-item">
                        <button type="button" class="nav-link click" role="tab" data-bs-toggle="tab" data-bs-target="#form" aria-controls="navs-justified-profile" aria-selected="false"><i class="tf-icons ti ti-keyboard ti-xs me-1"></i> Record</button>
                    </li>
                </ul>
                <div class="tab-content">
                    <div class="tab-pane fade show active" id="data" role="tabpanel">
                        <table class="datatables-basic table">
                            <thead>
                                <tr>
                                    <th>#</th>
                                    <th>Name</th>
                                    <th>Date Created</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    int i = 1;
                                }
                                @foreach (var m in Model)
                                {
                                    <tr>
                                        <td>@i</td>
                                        <td>@m.Name</td>
                                        <td>@m.DateCreated</td>
                                        <td><button onclick="EditPage('@m.Id')" style="padding: 5px;" class="btn btn-xs btn-warning"><i class="fa fa-edit"></i></button><button onclick="Delete('@m.Id')"  style="padding: 5px;" class="btn btn-xs btn-danger ms-2"><i class="fa fa-trash"></i></button></td>
                                    </tr>

                                    i++;
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="tab-pane fade" id="form" role="tabpanel">
                        <!-- Basic Layout & Basic with Icons -->
                        <div class="row" id="app">
                            <!-- Basic Layout -->
                            <div class="col-xxl">
                                <div class="card mb-4">
                                    <div class="card-body">
                                        <form @@submit.prevent="handleSubmit" encytpe="multipart/form-data">
                                            <div class="row mb-3">
                                                <label class="col-sm-2 col-form-label" for="Company_ID">Company</label>
                                                <div class="col-sm-10">
                                                    <select v-model="vm.Company_ID" id="Company_ID" required="required" class="form-control">
                                                        <option value="">Select Company</option>
                                                        <option v-for="option in companies" v-bind:value="option.ID">{{option.Name}}</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="row mb-3">
                                                <label class="col-sm-2 col-form-label" for="Name">Name</label>
                                                <div class="col-sm-10">
                                                    <input type="text" v-model="vm.Name" class="form-control" id="Name" required maxlength="250" />
                                                </div>
                                            </div>
                                            <div class="row mb-3">
                                                <label class="col-sm-2 col-form-label" for="Phone">Phone</label>
                                                <div class="col-sm-10">
                                                    <input type="text" v-model="vm.Phone" class="form-control" id="Phone" required maxlength="250" />
                                                </div>
                                            </div>
                                            <div class="row mb-3">
                                                <label class="col-sm-2 col-form-label" for="Email">Email</label>
                                                <div class="col-sm-10">
                                                    <input type="email" v-model="vm.Email" class="form-control" id="Email" required maxlength="250" />
                                                </div>
                                            </div>
                                            <div class="row mb-3">
                                                <label class="col-sm-2 col-form-label" for="Name">Address</label>
                                                <div class="col-sm-10">
                                                    <input type="text" v-model="vm.Address" class="form-control" id="Address" required maxlength="250" />
                                                </div>
                                            </div>
                                            <div class="row mb-3">
                                                <label class="col-sm-2 col-form-label" for="Name">Password</label>
                                                <div class="col-sm-10">
                                                    <input type="password" pattern ="^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@@$!%*#?&])[A-Za-z\d@@$#!%*?&]{8,}$" v-model="vm.Password" v-if="vm.Id==null" class="form-control" id="Password" required maxlength="250" />
                                                    <input type="password" pattern ="^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@@$!%*#?&])[A-Za-z\d@@$#!%*?&]{8,}$" v-model="vm.Password" v-else="vm.Id==null" class="form-control" id="Password"  maxlength="250" />
                                                    <br />
                                                    <small>(minimum 8 characters with 1 of each Uppercase,Lowercase,digit and special characters )</small>
                                                </div>
                                            </div>
                                            <div class="row mb-3">
                                                <label class="col-sm-2 col-form-label" for="ConfirmPassword">Confirm Password</label>
                                                <div class="col-sm-10">
                                                    <input type="password"  v-if="vm.Id==null" v-model="vm.ConfirmPassword" class="form-control" id="ConfirmPassword" required maxlength="250" />
                                                    <input type="password"  v-else="vm.Id==null" v-model="vm.ConfirmPassword" class="form-control" id="ConfirmPassword"  maxlength="250" />
                                                </div>
                                            </div>
                                            <div class="row justify-content-end mt-4">
                                                <div class="col-sm-10">
                                                    <button type="submit" class="btn btn-success float-end"><i class="fa fa-save"></i> &nbsp;Save</button>
                                                    <button type="button" onclick="window.location.reload()" class="btn btn-danger float-end mx-2"><i class="fa fa-cancel"></i> &nbsp;Cancel</button>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>

                        </div>

                    </div>

                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts
{
  
    <script>
        function Delete(ID) {
            Swal.fire({
                showCancelButton: false,
                title: 'Are you sure you want to delete this record?',
                icon: 'error',
                showDenyButton: true,
                confirmButtonText: 'Yes',
                denyButtonText: 'No',
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/delete/companyuser?id=' + ID,
                        type: "GET",
                        cache: false,
                        success: function (o) {
                            toastr.error("Record has been deleted.");
                            setTimeout(function () {
                                window.location.reload()
                            }, 500);
                        },
                        error: function (o) {
                            toastr.error("Record has not been deleted because dependent data is present.");
                        }
                    }
                    );

             
                } else if (result.isDenied) {
                 
                }
            })
        }
        function EditPage(ID) {
            $.ajax({

                url: '/get/companyuser?id=' + ID,
                type: "GET",
                cache: false,
                success: function (o) {
                    vueContent.vm = o;
                    //try { vueContent.vm.POST_DTE = o.POST_DTE.split('T')[0]; }
                    //catch {

                    //}

                    setTimeout(function () {
                        $('select').not(".keepDisabled").each(function () {
                            $(this).removeAttr("disabled");
                        })
                        $('input').each(function () {
                            $(this).removeAttr("disabled", "disabled");
                        })

                        if (!$(".frm").hasClass("border-bottom"))
                            $('.click').trigger("click");

                        $('select').trigger("change");
                    }, 500);

                }
            });
        }
       
        var vueContent = new Vue({
            el: '#app',
            data: {
                vm: {
                    Id: null,
                    Name: null,
                    Company_ID: "",
                },
                companies:[]
            },
            methods: {
                handleSubmit() {

                    if (this.vm.Password != this.vm.ConfirmPassword) {
                        toastr.error("Password and Confirm Password Donot Match!");
                        return false;
                    }

                    axios.get("/web/emailexists?email=" + this.vm.Email + "&id=" + this.vm.Id).then((res) => {
                        if (!res.data) {

                            toastr.error("Email already exists!");
                            return false;
                        }
                        else {
                            axios.post('/admin/companyuser', JSON.stringify(this.vm), {
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            }).then(response => {
                                if (response.data > 0) {
                                    toastr.success("Record has been updated.");
                                    setTimeout(function () {
                                        window.location.reload()
                                    }, 500);

                                }
                                else if (response.data == 0) {
                                    toastr.success("Record has been updated.");
                                    setTimeout(function () {
                                        window.location.reload()
                                    }, 500);
                                }
                                else {
                                    Swal.fire({
                                        title: 'Error!',
                                        text: 'An Error has occured please contact System Administrator.',
                                        icon: 'error',
                                        showConfirmButton: false
                                    });
                                }
                            }).catch(error => {
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'An Error has occured please contact System Administrator.',
                                    icon: 'error',
                                    showConfirmButton: false
                                })
                            })
                        }
                    });

                  
                },
                addItem() {
                    this.vm.Users.push({ ID: 0, Email: null, Phone: null, Address: null, Name: null, UserName: null });
                },
                remove(index) {
                    if (this.vm.Users.length == 1) {
                        alert("Atleast one item is requried");
                        return false;
                    }
                    let confirm = window.confirm("Are you sure you want to delete this item?");
                    if (confirm) {
                        this.vm.Users.splice(index, 1);
                        toastr.error("User deleted!");
                    }
                },
                LoadDropdowns() {
                    axios.get("/dropdowns/companies").then((res) => {
                        this.companies = res.data;
                    });
                }
            },
            beforeMount() {
                this.LoadDropdowns()
            },
        });
    </script>
}
